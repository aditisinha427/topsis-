# -*- coding: utf-8 -*-
"""102203846.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b4Sjdf29OO0XIHSzOb460WX8cvDF92iR
"""

import numpy as np
import pandas as pd
import sys



def topsis(input_file, weights, impacts, result_file):
    try:
        data = pd.read_excel('data.xlsx')

        if len(data.columns) < 3:
            raise ValueError("Input file must have at least three columns.")

        decision_matrix = data.iloc[:, 1:].values

        weights = np.array([float(w) for w in weights.split(',')])
        impacts = impacts.split(',')
        if len(weights) != decision_matrix.shape[1] or len(impacts) != decision_matrix.shape[1]:
            raise ValueError("Weights and impacts must match the number of columns in the decision matrix.")
        if not all(i in ['+', '-'] for i in impacts):
            raise ValueError("Impacts must be '+' or '-'.")

        norm_matrix = decision_matrix / np.sqrt((decision_matrix**2).sum(axis=0))

        weighted_matrix = norm_matrix * weights

        ideal_best = []
        ideal_worst = []
        for i in range(weighted_matrix.shape[1]):
            if impacts[i] == '+':
                ideal_best.append(weighted_matrix[:, i].max())
                ideal_worst.append(weighted_matrix[:, i].min())
            else:
                ideal_best.append(weighted_matrix[:, i].min())
                ideal_worst.append(weighted_matrix[:, i].max())

        dist_best = np.sqrt(((weighted_matrix - ideal_best)**2).sum(axis=1))
        dist_worst = np.sqrt(((weighted_matrix - ideal_worst)**2).sum(axis=1))
        scores = dist_worst / (dist_best + dist_worst)

        ranks = scores.argsort()[::-1] + 1

        data['Topsis Score'] = scores
        data['Rank'] = ranks


        data.to_csv(result_file, index=False)
        print(f"Results saved to {result_file}")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python <RollNumber>.py <InputDataFile> <Weights> <Impacts> <ResultFileName>")
    else:
        input_file = sys.argv[1]
        weights = sys.argv[2]
        impacts = sys.argv[3]
        result_file = sys.argv[4]
        topsis(input_file, weights, impacts, result_file)